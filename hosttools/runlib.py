""" run an application on target """
import sys
import argparse
import testboard

SERIALPORT = "/dev/ttyACM0"

def install_help(app):
    """ --install help text """
    return f"install {app} target files then run {app}"

def revsync_help(app):
    """ --revsync help text """
    return f"copy {app} target files to host - use with care"

def app_help(app):
    """ --app help text """
    return f"autorun {app} on boot - installs autogenerated code.py/main.py"

def runapp(appname, homedir, installfiles):
    """ run specified application """

    #
    # arguments:
    # appname: "import appname" must work on target to run the app
    # homedir: eg. /Radio,  Top level directory. Specified in Radio/install.py on host.
    # installfiles: specified in Radio/install.py on host
    #
    parser = argparse.ArgumentParser()
    parser.add_argument("--install", help=install_help(appname), action="store_true")
    parser.add_argument("--revsync", help=revsync_help(appname), action="store_true")
    parser.add_argument("--app",     help=app_help(appname), action="store_true")

    args = parser.parse_args()

    board = testboard.getboard(SERIALPORT)

    # must get one
    assert board

    # eg. /Radio on target, Scout-Radio/software/Radio on host
    board.sethomedir(homedir)

    #
    # give board object its info
    #
    if args.install or args.revsync:
        board.setfiles(installfiles)

    # pull files back from target?
    if args.revsync:
        board.revsync()
        sys.exit(0)

    #
    # bring up the board
    # copy files to target if any are specified in setfiles method
    #
    board.initialise()

    if args.app:

        board.start_app_on_powerup(appname)

        print(f"{appname} set to run on boot")

        #
        # pyexpect will most likely time out here as the app will
        # now be running on target.
        #
        sys.exit(0)

    #
    # default case
    # start the app, we won't get a >>> back
    #
    board.sendrepl(f"import {appname}", expect_repl=False)

    # runs until user interrupt
    board.readserial()
